{"version":3,"sources":["components/AddAppointments.js","components/ListAppointments.js","components/SearchAppointments.js","components/App.js","serviceWorker.js","index.js"],"names":["AddAppointments","react_default","a","createElement","Component","ListAppointments","_this","this","className","props","appointments","map","item","key","aptId","onClick","deleteAppointment","index_esm","petName","dist_default","date","aptDate","parse","format","ownerName","aptNotes","SearchAppointments","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","myAppointments","lastIndex","bind","assertThisInitialized","apt","tempApts","without","setState","_this2","fetch","then","response","json","result","apts","id","components_AddAppointments","components_SearchAppointments","components_ListAppointments","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2QAUeA,0LANP,OACIC,EAAAC,EAAAC,cAAA,sCAHkBC,uCC6CfC,mLAzCH,IAAAC,EAAAC,KACJ,OACEN,EAAAC,EAAAC,cAAA,OAAKK,UAAU,mCACZD,KAAKE,MAAMC,aAAaC,IAAI,SAAAC,GAAI,OAC/BX,EAAAC,EAAAC,cAAA,OAAKK,UAAU,0BAA0BK,IAAKD,EAAKE,OACjDb,EAAAC,EAAAC,cAAA,OAAKK,UAAU,QACbP,EAAAC,EAAAC,cAAA,UAAQK,UAAU,mCAClBO,QAAW,kBAAKT,EAAKG,MAAMO,kBAAkBJ,KAC3CX,EAAAC,EAAAC,cAACc,EAAA,EAAD,QAIJhB,EAAAC,EAAAC,cAAA,OAAKK,UAAU,uBACbP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,mBACbP,EAAAC,EAAAC,cAAA,QAAMK,UAAU,YAAYI,EAAKM,SACjCjB,EAAAC,EAAAC,cAAA,QAAMK,UAAU,oBACjBP,EAAAC,EAAAC,cAACgB,EAAAjB,EAAD,CACCkB,KAAMR,EAAKS,QACXC,MAAQ,mBACRC,OAAO,kBAOTtB,EAAAC,EAAAC,cAAA,OAAKK,UAAU,cACbP,EAAAC,EAAAC,cAAA,QAAMK,UAAU,cAAhB,WACAP,EAAAC,EAAAC,cAAA,YAAOS,EAAKY,YAEdvB,EAAAC,EAAAC,cAAA,OAAKK,UAAU,aAAaI,EAAKa,sBA/BpBrB,aCIhBsB,mLALP,OACIzB,EAAAC,EAAAC,cAAA,yCAHqBC,qBC8DlBuB,cApDb,SAAAA,IAAa,IAAArB,EAAA,OAAAsB,OAAAC,EAAA,EAAAD,CAAArB,KAAAoB,IACXrB,EAAAsB,OAAAE,EAAA,EAAAF,CAAArB,KAAAqB,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAAzB,QACK0B,MAAQ,CACXC,eAAgB,GAChBC,UAAU,GAEZ7B,EAAKU,kBAAoBV,EAAKU,kBAAkBoB,KAAvBR,OAAAS,EAAA,EAAAT,CAAAtB,IANdA,iFASKgC,GAChB,IAAIC,EAAWhC,KAAK0B,MAAMC,eAC1BK,EAAWC,kBAAQD,EAAUD,GAE7B/B,KAAKkC,SAAS,CACZP,eAAeK,gDAIA,IAAAG,EAAAnC,KACjBoC,MAAM,eACLC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GACJ,IAAMC,EAAOD,EAAOpC,IAAI,SAAAC,GAGtB,OAFAA,EAAKE,MAAQ4B,EAAKT,MAAME,UACxBO,EAAKD,SAAS,CAACN,UAAUO,EAAKT,MAAME,UAAY,IACzCvB,IAET8B,EAAKD,SAAS,CACZP,eAAgBc,uCAMtB,OACE/C,EAAAC,EAAAC,cAAA,QAAMK,UAAU,gBAAgByC,GAAG,eACjChD,EAAAC,EAAAC,cAAA,OAAKK,UAAU,aACbP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,OACbP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,sBACbP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,aACbP,EAAAC,EAAAC,cAAC+C,EAAD,MACAjD,EAAAC,EAAAC,cAACgD,EAAD,MACAlD,EAAAC,EAAAC,cAACiD,EAAD,CAAkB1C,aAAcH,KAAK0B,MAAMC,eAAgBlB,kBAAmBT,KAAKS,gCA5C/EZ,aCEEiD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,6ECRNC,IAASC,OAAO1D,EAAAC,EAAAC,cAACyD,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,KAAK,SAAAsB,GACjCA,EAAaC","file":"static/js/main.c70102c6.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass AddAppointments extends Component{\n    render(){\n        return(\n            <div>Add Appointments</div>\n            )\n    }\n}\n\nexport default AddAppointments","import React, {Component} from 'react';\nimport { FaTimes } from 'react-icons/fa';\nimport Moment from 'react-moment';\n\n\nclass ListAppointments extends Component{\n    render(){\n        return(\n          <div className=\"appointment-list item-list mb-3\">\n            {this.props.appointments.map(item=>(\n              <div className=\"pet-item col media py-3\" key={item.aptId}>\n                <div className=\"mr-3\">\n                  <button className=\"pet-delete btn btn-sm btn-danger\" \n                  onClick = {()=> this.props.deleteAppointment(item)}> \n                    <FaTimes /> \n                  </button>\n                </div>\n\n                <div className=\"pet-info media-body\">\n                  <div className=\"pet-head d-flex\">\n                    <span className=\"pet-name\">{item.petName}</span>\n                    <span className=\"apt-date ml-auto\">\n                   <Moment\n                    date={item.aptDate}\n                    parse = \"YYYY-MM-dd hh:mm\"\n                    format=\"MMM-D h:mma\"\n                    />\n\n                    </span>\n                    \n                  </div>\n\n                  <div className=\"owner-name\">\n                    <span className=\"label-item\">Owner: </span>\n                    <span>{item.ownerName}</span>\n                  </div>\n                  <div className=\"apt-notes\">{item.aptNotes}</div>\n                </div>\n              </div>\n            )\n            )}\n          </div>\n\n\n        )\n    }\n}\nexport default ListAppointments","import React, {Component} from 'react'\n\nclass SearchAppointments extends Component{\n    render(){\n        return(\n            <div>Search Appointments</div>\n            )\n    }\n}\nexport default SearchAppointments","import React, { Component } from 'react';\nimport '../css/App.css';\n\nimport AddAppointments from './AddAppointments';\nimport ListAppointments from './ListAppointments';\nimport SearchAppointments from './SearchAppointments';\n\nimport {without} from 'lodash';\n\n\nclass App extends Component {\n\n  constructor(){\n    super();\n    this.state = {\n      myAppointments: [],\n      lastIndex:0\n    }\n    this.deleteAppointment = this.deleteAppointment.bind(this);\n  }\n\n  deleteAppointment(apt){\n    let tempApts = this.state.myAppointments;\n    tempApts = without(tempApts, apt);\n\n    this.setState({\n      myAppointments:tempApts\n    })\n  }\n\n  componentDidMount(){\n    fetch('./data.json') //fetch api works with promises\n    .then(response => response.json())\n    .then(result => {\n      const apts = result.map(item =>{ //process result by creating var\n        item.aptId = this.state.lastIndex;\n        this.setState({lastIndex:this.state.lastIndex + 1})\n        return item;\n      })\n      this.setState({\n        myAppointments: apts\n      });\n    });\n  }\n\n  render(){\n  return (\n    <main className=\"page bg-white\" id=\"petraitings\">\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-md-12 bg-white\">\n            <div className=\"container\">\n              <AddAppointments />\n              <SearchAppointments />\n              <ListAppointments appointments={this.state.myAppointments} deleteAppointment={this.deleteAppointment}/>\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './css/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'jquery/dist/jquery.js'\nimport 'popper.js/dist/umd/popper.js'\nimport 'bootstrap/dist/js/bootstrap.js';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}